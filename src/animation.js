import { Sprite } from './sprite.js'
import { Box } from './math/box.js'
import { data } from './data.js'

/**
 * Animations with their name.
 *
 * @typedef {Object<string, Animation>} AnimationsMap
 */

/**
 * Create `<animationName, Animation>` map from provided animation entries.
 *
 * @param {import('./data').AnimationEntries} animationEntries
 */
export const makeAnimationsMap = animationEntries => {
  /** @type {AnimationsMap} */
  const animationsMap = {}

  for (const animationName in animationEntries) {
    const animationEntry = animationEntries[animationName]

    const spriteSheet = data.assets.spriteSheets[animationEntry.spriteSheet]

    const animationFrames = animationEntry.frames.map(
      frame =>
        new AnimationFrame(
          new Sprite(spriteSheet, ...frame.sprite),
          new Box(...frame.hitbox),
          frame.duration
        )
    )

    animationsMap[animationName] = new Animation(animationFrames)
  }

  return animationsMap
}

export class AnimationFrame {
  /**
   * @param {Sprite} sprite
   * @param {Box} hitbox
   * @param {number} duration
   */
  constructor(sprite, hitbox, duration) {
    /**
     * The sprite of the animation frame.
     *
     * @public
     */
    this.sprite = sprite

    /**
     * The hitbox of the animation frame.
     *
     * @public
     */
    this.hitbox = hitbox

    /**
     * The duration of the animation frame. The unit is render time.
     *
     * @public
     */
    this.duration = duration
  }
}

export class Animation {
  /**
   * Generator function to create an iterator for animation frame index.
   *
   * @public
   * @static
   *
   * @param {number} frameCount
   * @param {number[]} frameDurations An array of number. Each element is the `duration` of the frame corresponding to its index.
   */
  static *makeFrameIndexIterator(frameCount, frameDurations) {
    let frameIndex = 0
    let isFrameDone = false

    for (let i = 1; i < Infinity; i++) {
      if (i % frameDurations[frameIndex] === 0) {
        frameIndex++
        frameIndex %= frameCount
        isFrameDone = true
      } else {
        isFrameDone = false
      }

      yield { frameIndex, isFrameDone }
    }
  }

  /**
   * @param {AnimationFrame[]} animationFrames
   */
  constructor(animationFrames) {
    /**
     * Current frame index.
     *
     * Set by `reset` and `getNextFrame`.
     *
     * @private
     *
     * @type {number}
     */
    this.currentFrameIndex = undefined

    /**
     * Animation frame index iterator for the current action.
     *
     * Generated by `Animation.makeFrameIndexIterator` and set by `reset`.
     *
     * @private
     *
     * @generator
     */
    this.frameIndexIterator = undefined

    /**
     * {@link Animation#isCurrentFrameDone}
     *
     * @private
     *
     * @type {boolean}
     */
    this._isCurrentFrameDone = undefined

    /**
     * An array of `AnimationFrame` representing the frames of the animation.
     *
     * @private
     */
    this.frames = animationFrames

    this.reset()
  }

  /**
   * If the current frame has lasted enough time according to `frameDuration`.
   *
   * Changed by `reset` and `getNextFrame`.
   *
   * @public
   * @readonly
   */
  get isCurrentFrameDone() {
    return this._isCurrentFrameDone
  }

  /**
   * Reset `currentFrameIndex`, `frameIndexIterator` and `isCurrentFrameDone`.
   *
   * @public
   */
  reset() {
    this.currentFrameIndex = 0
    this.frameIndexIterator = Animation.makeFrameIndexIterator(
      this.frames.length,
      this.frames.map(frame => frame.duration)
    )
    this._isCurrentFrameDone = false
  }

  /**
   * Get current frame according to `currentFrameIndex`.
   *
   * @public
   */
  getCurrentFrame() {
    return this.frames[this.currentFrameIndex]
  }

  /**
   * Get next animation frame according to the next frame index returned by `frameIndexIterator`.
   *
   * @public
   */
  getNextFrame() {
    const { frameIndex, isFrameDone } = this.frameIndexIterator.next().value

    if (isFrameDone) {
      this.currentFrameIndex = frameIndex
    }
    this._isCurrentFrameDone = isFrameDone

    return this.getCurrentFrame()
  }
}
